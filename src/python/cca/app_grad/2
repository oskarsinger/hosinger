import numpy as np

from numpy.random import randn, choice
from linal.utils import quadratic as quad
from linal.mp_pinv import get_mp_pinv as get_pinv
from optimization.utils import is_conv

def is_k_valid(X_ds, Y_ds, k):

    p = min([X_ds.cols(), Y_ds.cols()])

    return k < p

def is_converged(
    unn_Phi_pairs,
    epsilons, 
    verbose):

    conv_info = zip(unn_Phi_pairs, epsilons)
    Phis_converged = [is_conv(unn_Phi_t, unn_Phi_t1, eps1, verbose)
                      for (unn_Phi_t, unn_Phi_t1), eps in conv_info]

    return all(Phis_convered)

def get_objective(X, Phi, Y, Psi):

    X_trans = np.dot(X, Phi)
    Y_trans = np.dot(Y, Psi)

    return np.linalg.norm(X_trans - Y_trans)

def get_gradient(X1, unnormed1, Psi):

    n = X1.shape[0]
    transformed_X1 = np.dot(X1, unnormed1)
    transformed_X2 = np.dot(X2, normed2)
    diff = transformed_X1 - transformed_X2

    return np.dot(X1.T, diff) / n

def get_2way_basis_update(X1, X2, unnormed1, normed2, S1, eta1):

    Psi = np.dot(X2, normed2)

    return get_basis_update(X2, unnormed1, Psi, S1, eta1)

def get_basis_update(X1, unnormed1, Psi, S1, eta1):

    # Calculate gradient for 2-way CCA
    gradient = get_gradient(X1, unnormed1, Psi)

    # Take a gradient step on unnormed1
    unnormed1_next = unnormed1 - eta1 * gradient

    # Normalize unnormed 1 with inversion of matrix quadratic
    normed1 = get_gram_normed(unnormed1_next, S1)

    return (unnormed1_next, normed1)

def get_init_basis_pairs(Sxs, k):

    return [get_init_basis_pair(Sx, k)
            for Sx in Sxs]

def get_init_basis_pair(Sx, k):

    # Initialize Gaussian matrices for unnormalized bases
    unn_Phi = randn(Sx.shape[0], k)

    # Normalize for initial normalized bases
    Phi = get_gram_normed(unn_Phi, Sx)

    return (Phi, unn_Phi)

def get_gram_normed(unnormed, S):

    basis_quad = quad(unnormed, S)
    normalizer = get_pinv(
        basis_quad, energy=0.95, sqrt=True)

    return np.dot(unnormed, normalizer)
